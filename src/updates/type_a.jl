export move_particle

function move_particle(m::Model, e::Ensemble, c::Configuration) :: Tuple{Float64, Step}
    free_orbitals = filter(x -> isunaffected(c.kinks, x), c.occupations)
    if isempty(free_orbitals)
        return 1.0, Step()
    else
        x = rand( free_orbitals )
    end
    oe = filter(x -> isunaffected(c.kinks,x), setdiff!(sphere_with_same_spin(x, dk = ex_radius), c.occupations))

    #if there are no empty non interacting orbitals in neighbourhood make no change
    if isempty(oe)
        return 1.0, Step()
    end
    y = rand(oe)
    @assert x != y "same Configuration proposed."

    delta_di = Δdiagonal_interaction(m, e, c, y, x, ImgTime(0), ImgTime(1))
    @assert delta_di != Inf
    # weight change
    dw = exp(-(e.β*(energy(m,y)-energy(m,x)) + e.β*delta_di))

    # MC Step generated by this update
    Δ = Step(x, y)

    # get orbitals for reverse update
    oe2 = filter(x -> isunaffected(apply_step(c,Δ).kinks,x), setdiff!(sphere_with_same_spin(y, dk = ex_radius), apply_step(c,Δ).occupations) )


    # quotient of proposal probabilities
    dv = length(oe)/length(oe2)
    @assert dv >= 0
    @assert dw >= 0 "dw=$(dw), x=$(x), y=$(y), delta_di=$(delta_di)"
    @assert (dv*dw) >= 0
    return dv*dw, Δ
end
